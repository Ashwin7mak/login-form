{"version":3,"sources":["actions/updateActions.js","components/signup.component.js","components/welcomepage.component.js","App.js","serviceWorker.js","index.js"],"names":["updateAction","state","payload","data","withRouter","props","useStateMachine","action","useForm","register","handleSubmit","errors","onSubmit","e","console","log","history","push","target","reset","type","name","ref","required","minLength","value","message","firstName","className","pattern","email","password","Welcomepage","createStore","App","exact","path","component","Signup","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"uRAAe,SAASA,EAAaC,EAAOC,GACxC,OAAO,2BACAD,GADP,IAEIE,KAAK,2BACEF,EAAME,MACND,KCCf,IAiEeE,eAjEA,SAACC,GAAW,IAAD,EAEIC,YAAgBN,GAAlCO,EAFc,EAEdA,OAFc,KAENN,MAE2BO,eAAnCC,EAJc,EAIdA,SAAUC,EAJI,EAIJA,aAAcC,EAJV,EAIUA,OAShC,OACI,0BAAMC,SAAUF,GARH,SAACP,EAAMU,GACpBC,QAAQC,IAAIZ,GACZI,EAAOJ,GACPE,EAAMW,QAAQC,KAAK,aACnBJ,EAAEK,OAAOC,YAKL,qCAAU,6BAAM,4CAChB,2HAEA,6CACA,2BACIC,KAAK,OACLC,KAAK,YACLC,IAAKb,EAAS,CACVc,SAAU,yBACVC,UAAW,CACPC,MAAO,EACPC,QAAS,+CAGpBf,EAAOgB,WAAa,0BAAMC,UAAU,SAASjB,EAAOgB,UAAUD,SAE/D,gDACA,2BACIN,KAAK,QACLC,KAAK,QACLC,IAAKb,EAAS,CACVc,SAAU,oBACVM,QAAS,CACLJ,MAAO,4CACPC,QAAS,oCAIpBf,EAAOmB,OAAS,0BAAMF,UAAU,SAASjB,EAAOmB,MAAMJ,SAEvD,2CACA,2BACIL,KAAK,WACLD,KAAK,WACLE,IAAKb,EAAS,CACVc,SAAU,uBACVC,UAAY,CACRC,MAAO,EACPC,QAAS,+CAIpBf,EAAOoB,UAAY,0BAAMH,UAAU,SAASjB,EAAOoB,SAASL,SAE7D,2BAAON,KAAK,SAASK,MAAM,gBC9CxBO,EAfK,SAAA3B,GAAU,IAClBJ,EAAUK,YAAgBN,GAA1BC,MAER,OACI,8BACI,uCACA,4BAAKA,EAAME,KAAKwB,UAAhB,MACA,iFAAsD,6BAAtD,2DAEA,4BAAK1B,EAAME,KAAK2B,OAChB,2BAAOV,KAAK,SAASK,MAAM,c,MCPvCQ,YAAY,CACV9B,KAAM,CACJwB,UAAW,GACXG,MAAO,GACPC,SAAU,MAsBCG,MAlBf,WACE,OACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWC,IAClC,kBAAC,IAAD,CAAOF,KAAK,WAAWC,UAAWL,UCZ5BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAM9B,c","file":"static/js/main.f2b56713.chunk.js","sourcesContent":["export default function updateAction(state, payload) {\n    return {\n        ...state,\n        data: {\n            ...state.data,\n            ...payload\n        }\n    };\n}\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { withRouter } from 'react-router-dom';\nimport { useStateMachine } from 'little-state-machine';\nimport updateAction from '../actions/updateActions';\n\nconst Signup = (props) => {\n\n    const { action, state } = useStateMachine(updateAction);\n\n    const { register, handleSubmit, errors } = useForm();\n\n    const onSubmit = (data, e) => { \n        console.log(data);\n        action(data);\n        props.history.push(\"./welcome\");\n        e.target.reset();\n    }\n\n    return (\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <h1>Let's <br /><strong>Sign Up</strong></h1>\n            <p> Use the form below to sing up for this super awesome service. You're only a few steps away!</p>\n\n            <label>First Name</label>\n            <input\n                type=\"text\"\n                name=\"firstName\"\n                ref={register({ \n                    required: \"Enter valid first name\", \n                    minLength: {\n                        value: 3,\n                        message: \"First name must be atleast 3 characters\"\n                    } })}\n            />\n            {errors.firstName && <span className=\"error\">{errors.firstName.message}</span>}\n\n            <label>Email Address</label>\n            <input\n                type=\"email\"\n                name=\"email\"\n                ref={register({\n                    required: \"Enter your e-mail\",\n                    pattern: {\n                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n                        message: \"Enter a valid e-mail address\"\n                    }\n                })}\n            />\n            {errors.email && <span className=\"error\">{errors.email.message}</span>}\n\n            <label>Password</label>\n            <input\n                name=\"password\"\n                type=\"password\"\n                ref={register({ \n                    required: 'Enter valid password', \n                    minLength:  {\n                        value: 8,\n                        message: \"Password must have atleast 8 characters\"\n                    }\n                })}\n            />\n            {errors.password && <span className=\"error\">{errors.password.message}</span>}\n\n            <input type=\"submit\" value=\"Sign Up\" />\n\n        </form>\n    );\n};\n\nexport default withRouter(Signup);\n\n","import React from 'react';\nimport { useStateMachine } from 'little-state-machine';\nimport updateAction from '../actions/updateActions';\n\nconst Welcomepage = props => {\n    const { state } = useStateMachine(updateAction);\n\n    return (\n        <form>\n            <h1>Welcome</h1>\n            <h2>{state.data.firstName} !</h2>\n            <p>You have been registered for this awesome service. <br />\n            Please check your email listed below for instructions. </p>\n            <h3>{state.data.email}</h3>\n            <input type=\"submit\" value=\"Sign In\" />\n        </form>\n    );\n};\n\nexport default Welcomepage;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport { StateMachineProvider, createStore } from 'little-state-machine';\nimport Signup from './components/signup.component';\nimport Welcomepage from './components/welcomepage.component'\nimport './App.css';\n\ncreateStore({\n  data: {\n    firstName: '',\n    email: '',\n    password: ''\n  }\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"auth-wrapper\">\n        <div className=\"auth-inner\">\n          <StateMachineProvider>\n            <Router>\n              <Route exact path=\"/\" component={Signup} />\n              <Route path=\"/sign-up\" component={Signup} />\n              <Route path=\"/welcome\" component={Welcomepage} />\n            </Router>\n          </StateMachineProvider>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}